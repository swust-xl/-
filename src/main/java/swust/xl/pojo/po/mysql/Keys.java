/*
 * This file is generated by jOOQ.
*/
package swust.xl.pojo.po.mysql;


import javax.annotation.Generated;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;

import swust.xl.pojo.po.mysql.tables.UserPerson;
import swust.xl.pojo.po.mysql.tables.records.UserPersonRecord;


/**
 * A class modelling foreign key relationships between tables of the <code>test</code> 
 * schema
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<UserPersonRecord, Long> IDENTITY_USER_PERSON = Identities0.IDENTITY_USER_PERSON;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<UserPersonRecord> KEY_USER_PERSON_PRIMARY = UniqueKeys0.KEY_USER_PERSON_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<UserPersonRecord, Long> IDENTITY_USER_PERSON = createIdentity(UserPerson.USER_PERSON, UserPerson.USER_PERSON.ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<UserPersonRecord> KEY_USER_PERSON_PRIMARY = createUniqueKey(UserPerson.USER_PERSON, "KEY_user_person_PRIMARY", UserPerson.USER_PERSON.ID);
    }
}
