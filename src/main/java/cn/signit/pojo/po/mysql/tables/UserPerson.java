/*
 * This file is generated by jOOQ.
*/
package cn.signit.pojo.po.mysql.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import cn.signit.pojo.po.mysql.Indexes;
import cn.signit.pojo.po.mysql.Keys;
import cn.signit.pojo.po.mysql.Test;
import cn.signit.pojo.po.mysql.tables.records.UserPersonRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserPerson extends TableImpl<UserPersonRecord> {

    private static final long serialVersionUID = -375382028;

    /**
     * The reference instance of <code>test.user_person</code>
     */
    public static final UserPerson USER_PERSON = new UserPerson();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserPersonRecord> getRecordType() {
        return UserPersonRecord.class;
    }

    /**
     * The column <code>test.user_person.id</code>.
     */
    public final TableField<UserPersonRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>test.user_person.username</code>.
     */
    public final TableField<UserPersonRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>test.user_person.email</code>.
     */
    public final TableField<UserPersonRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>test.user_person.sex</code>.
     */
    public final TableField<UserPersonRecord, String> SEX = createField("sex", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>test.user_person.is_system</code>.
     */
    public final TableField<UserPersonRecord, Byte> IS_SYSTEM = createField("is_system", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>test.user_person.salt</code>.
     */
    public final TableField<UserPersonRecord, String> SALT = createField("salt", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>test.user_person.password_salt</code>.
     */
    public final TableField<UserPersonRecord, String> PASSWORD_SALT = createField("password_salt", org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>test.user_person.regist_datetime</code>.
     */
    public final TableField<UserPersonRecord, Timestamp> REGIST_DATETIME = createField("regist_datetime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>test.user_person.last_login_datetime</code>.
     */
    public final TableField<UserPersonRecord, Timestamp> LAST_LOGIN_DATETIME = createField("last_login_datetime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>test.user_person</code> table reference
     */
    public UserPerson() {
        this(DSL.name("user_person"), null);
    }

    /**
     * Create an aliased <code>test.user_person</code> table reference
     */
    public UserPerson(String alias) {
        this(DSL.name(alias), USER_PERSON);
    }

    /**
     * Create an aliased <code>test.user_person</code> table reference
     */
    public UserPerson(Name alias) {
        this(alias, USER_PERSON);
    }

    private UserPerson(Name alias, Table<UserPersonRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserPerson(Name alias, Table<UserPersonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_PERSON_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserPersonRecord, Long> getIdentity() {
        return Keys.IDENTITY_USER_PERSON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserPersonRecord> getPrimaryKey() {
        return Keys.KEY_USER_PERSON_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserPersonRecord>> getKeys() {
        return Arrays.<UniqueKey<UserPersonRecord>>asList(Keys.KEY_USER_PERSON_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserPerson as(String alias) {
        return new UserPerson(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserPerson as(Name alias) {
        return new UserPerson(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPerson rename(String name) {
        return new UserPerson(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPerson rename(Name name) {
        return new UserPerson(name, null);
    }
}
